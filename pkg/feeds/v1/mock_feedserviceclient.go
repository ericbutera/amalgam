// Code generated by mockery v2.47.0. DO NOT EDIT.

package feeds

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockFeedServiceClient is an autogenerated mock type for the FeedServiceClient type
type MockFeedServiceClient struct {
	mock.Mock
}

type MockFeedServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeedServiceClient) EXPECT() *MockFeedServiceClient_Expecter {
	return &MockFeedServiceClient_Expecter{mock: &_m.Mock}
}

// CreateFeed provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) CreateFeed(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption) (*CreateFeedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeed")
	}

	var r0 *CreateFeedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateFeedRequest, ...grpc.CallOption) (*CreateFeedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateFeedRequest, ...grpc.CallOption) *CreateFeedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateFeedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateFeedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_CreateFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFeed'
type MockFeedServiceClient_CreateFeed_Call struct {
	*mock.Call
}

// CreateFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CreateFeedRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) CreateFeed(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_CreateFeed_Call {
	return &MockFeedServiceClient_CreateFeed_Call{Call: _e.mock.On("CreateFeed",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_CreateFeed_Call) Run(run func(ctx context.Context, in *CreateFeedRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_CreateFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CreateFeedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_CreateFeed_Call) Return(_a0 *CreateFeedResponse, _a1 error) *MockFeedServiceClient_CreateFeed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_CreateFeed_Call) RunAndReturn(run func(context.Context, *CreateFeedRequest, ...grpc.CallOption) (*CreateFeedResponse, error)) *MockFeedServiceClient_CreateFeed_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFeedVerification provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) CreateFeedVerification(ctx context.Context, in *CreateFeedVerificationRequest, opts ...grpc.CallOption) (*CreateFeedVerificationResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeedVerification")
	}

	var r0 *CreateFeedVerificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateFeedVerificationRequest, ...grpc.CallOption) (*CreateFeedVerificationResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateFeedVerificationRequest, ...grpc.CallOption) *CreateFeedVerificationResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateFeedVerificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateFeedVerificationRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_CreateFeedVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFeedVerification'
type MockFeedServiceClient_CreateFeedVerification_Call struct {
	*mock.Call
}

// CreateFeedVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CreateFeedVerificationRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) CreateFeedVerification(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_CreateFeedVerification_Call {
	return &MockFeedServiceClient_CreateFeedVerification_Call{Call: _e.mock.On("CreateFeedVerification",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_CreateFeedVerification_Call) Run(run func(ctx context.Context, in *CreateFeedVerificationRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_CreateFeedVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CreateFeedVerificationRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_CreateFeedVerification_Call) Return(_a0 *CreateFeedVerificationResponse, _a1 error) *MockFeedServiceClient_CreateFeedVerification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_CreateFeedVerification_Call) RunAndReturn(run func(context.Context, *CreateFeedVerificationRequest, ...grpc.CallOption) (*CreateFeedVerificationResponse, error)) *MockFeedServiceClient_CreateFeedVerification_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFetchHistory provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) CreateFetchHistory(ctx context.Context, in *CreateFetchHistoryRequest, opts ...grpc.CallOption) (*CreateFetchHistoryResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFetchHistory")
	}

	var r0 *CreateFetchHistoryResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *CreateFetchHistoryRequest, ...grpc.CallOption) (*CreateFetchHistoryResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *CreateFetchHistoryRequest, ...grpc.CallOption) *CreateFetchHistoryResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CreateFetchHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *CreateFetchHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_CreateFetchHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFetchHistory'
type MockFeedServiceClient_CreateFetchHistory_Call struct {
	*mock.Call
}

// CreateFetchHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *CreateFetchHistoryRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) CreateFetchHistory(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_CreateFetchHistory_Call {
	return &MockFeedServiceClient_CreateFetchHistory_Call{Call: _e.mock.On("CreateFetchHistory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_CreateFetchHistory_Call) Run(run func(ctx context.Context, in *CreateFetchHistoryRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_CreateFetchHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*CreateFetchHistoryRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_CreateFetchHistory_Call) Return(_a0 *CreateFetchHistoryResponse, _a1 error) *MockFeedServiceClient_CreateFetchHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_CreateFetchHistory_Call) RunAndReturn(run func(context.Context, *CreateFetchHistoryRequest, ...grpc.CallOption) (*CreateFetchHistoryResponse, error)) *MockFeedServiceClient_CreateFetchHistory_Call {
	_c.Call.Return(run)
	return _c
}

// FeedTask provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) FeedTask(ctx context.Context, in *FeedTaskRequest, opts ...grpc.CallOption) (*FeedTaskResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FeedTask")
	}

	var r0 *FeedTaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *FeedTaskRequest, ...grpc.CallOption) (*FeedTaskResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *FeedTaskRequest, ...grpc.CallOption) *FeedTaskResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FeedTaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *FeedTaskRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_FeedTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FeedTask'
type MockFeedServiceClient_FeedTask_Call struct {
	*mock.Call
}

// FeedTask is a helper method to define mock.On call
//   - ctx context.Context
//   - in *FeedTaskRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) FeedTask(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_FeedTask_Call {
	return &MockFeedServiceClient_FeedTask_Call{Call: _e.mock.On("FeedTask",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_FeedTask_Call) Run(run func(ctx context.Context, in *FeedTaskRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_FeedTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*FeedTaskRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_FeedTask_Call) Return(_a0 *FeedTaskResponse, _a1 error) *MockFeedServiceClient_FeedTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_FeedTask_Call) RunAndReturn(run func(context.Context, *FeedTaskRequest, ...grpc.CallOption) (*FeedTaskResponse, error)) *MockFeedServiceClient_FeedTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticle provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArticle")
	}

	var r0 *GetArticleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetArticleRequest, ...grpc.CallOption) (*GetArticleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetArticleRequest, ...grpc.CallOption) *GetArticleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetArticleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetArticleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_GetArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticle'
type MockFeedServiceClient_GetArticle_Call struct {
	*mock.Call
}

// GetArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetArticleRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) GetArticle(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_GetArticle_Call {
	return &MockFeedServiceClient_GetArticle_Call{Call: _e.mock.On("GetArticle",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_GetArticle_Call) Run(run func(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_GetArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetArticleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_GetArticle_Call) Return(_a0 *GetArticleResponse, _a1 error) *MockFeedServiceClient_GetArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_GetArticle_Call) RunAndReturn(run func(context.Context, *GetArticleRequest, ...grpc.CallOption) (*GetArticleResponse, error)) *MockFeedServiceClient_GetArticle_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeed provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption) (*GetFeedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFeed")
	}

	var r0 *GetFeedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetFeedRequest, ...grpc.CallOption) (*GetFeedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetFeedRequest, ...grpc.CallOption) *GetFeedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetFeedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetFeedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_GetFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeed'
type MockFeedServiceClient_GetFeed_Call struct {
	*mock.Call
}

// GetFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetFeedRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) GetFeed(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_GetFeed_Call {
	return &MockFeedServiceClient_GetFeed_Call{Call: _e.mock.On("GetFeed",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_GetFeed_Call) Run(run func(ctx context.Context, in *GetFeedRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_GetFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetFeedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_GetFeed_Call) Return(_a0 *GetFeedResponse, _a1 error) *MockFeedServiceClient_GetFeed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_GetFeed_Call) RunAndReturn(run func(context.Context, *GetFeedRequest, ...grpc.CallOption) (*GetFeedResponse, error)) *MockFeedServiceClient_GetFeed_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserArticles provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) GetUserArticles(ctx context.Context, in *GetUserArticlesRequest, opts ...grpc.CallOption) (*GetUserArticlesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserArticles")
	}

	var r0 *GetUserArticlesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserArticlesRequest, ...grpc.CallOption) (*GetUserArticlesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserArticlesRequest, ...grpc.CallOption) *GetUserArticlesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetUserArticlesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetUserArticlesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_GetUserArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserArticles'
type MockFeedServiceClient_GetUserArticles_Call struct {
	*mock.Call
}

// GetUserArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetUserArticlesRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) GetUserArticles(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_GetUserArticles_Call {
	return &MockFeedServiceClient_GetUserArticles_Call{Call: _e.mock.On("GetUserArticles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_GetUserArticles_Call) Run(run func(ctx context.Context, in *GetUserArticlesRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_GetUserArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetUserArticlesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_GetUserArticles_Call) Return(_a0 *GetUserArticlesResponse, _a1 error) *MockFeedServiceClient_GetUserArticles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_GetUserArticles_Call) RunAndReturn(run func(context.Context, *GetUserArticlesRequest, ...grpc.CallOption) (*GetUserArticlesResponse, error)) *MockFeedServiceClient_GetUserArticles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFeed provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) GetUserFeed(ctx context.Context, in *GetUserFeedRequest, opts ...grpc.CallOption) (*GetUserFeedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFeed")
	}

	var r0 *GetUserFeedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserFeedRequest, ...grpc.CallOption) (*GetUserFeedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetUserFeedRequest, ...grpc.CallOption) *GetUserFeedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetUserFeedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetUserFeedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_GetUserFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFeed'
type MockFeedServiceClient_GetUserFeed_Call struct {
	*mock.Call
}

// GetUserFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - in *GetUserFeedRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) GetUserFeed(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_GetUserFeed_Call {
	return &MockFeedServiceClient_GetUserFeed_Call{Call: _e.mock.On("GetUserFeed",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_GetUserFeed_Call) Run(run func(ctx context.Context, in *GetUserFeedRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_GetUserFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*GetUserFeedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_GetUserFeed_Call) Return(_a0 *GetUserFeedResponse, _a1 error) *MockFeedServiceClient_GetUserFeed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_GetUserFeed_Call) RunAndReturn(run func(context.Context, *GetUserFeedRequest, ...grpc.CallOption) (*GetUserFeedResponse, error)) *MockFeedServiceClient_GetUserFeed_Call {
	_c.Call.Return(run)
	return _c
}

// ListArticles provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) ListArticles(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption) (*ListArticlesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArticles")
	}

	var r0 *ListArticlesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListArticlesRequest, ...grpc.CallOption) (*ListArticlesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListArticlesRequest, ...grpc.CallOption) *ListArticlesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListArticlesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListArticlesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_ListArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListArticles'
type MockFeedServiceClient_ListArticles_Call struct {
	*mock.Call
}

// ListArticles is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ListArticlesRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) ListArticles(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_ListArticles_Call {
	return &MockFeedServiceClient_ListArticles_Call{Call: _e.mock.On("ListArticles",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_ListArticles_Call) Run(run func(ctx context.Context, in *ListArticlesRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_ListArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ListArticlesRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_ListArticles_Call) Return(_a0 *ListArticlesResponse, _a1 error) *MockFeedServiceClient_ListArticles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_ListArticles_Call) RunAndReturn(run func(context.Context, *ListArticlesRequest, ...grpc.CallOption) (*ListArticlesResponse, error)) *MockFeedServiceClient_ListArticles_Call {
	_c.Call.Return(run)
	return _c
}

// ListFeeds provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) ListFeeds(ctx context.Context, in *ListFeedsRequest, opts ...grpc.CallOption) (*ListFeedsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFeeds")
	}

	var r0 *ListFeedsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListFeedsRequest, ...grpc.CallOption) (*ListFeedsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListFeedsRequest, ...grpc.CallOption) *ListFeedsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListFeedsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListFeedsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_ListFeeds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListFeeds'
type MockFeedServiceClient_ListFeeds_Call struct {
	*mock.Call
}

// ListFeeds is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ListFeedsRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) ListFeeds(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_ListFeeds_Call {
	return &MockFeedServiceClient_ListFeeds_Call{Call: _e.mock.On("ListFeeds",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_ListFeeds_Call) Run(run func(ctx context.Context, in *ListFeedsRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_ListFeeds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ListFeedsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_ListFeeds_Call) Return(_a0 *ListFeedsResponse, _a1 error) *MockFeedServiceClient_ListFeeds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_ListFeeds_Call) RunAndReturn(run func(context.Context, *ListFeedsRequest, ...grpc.CallOption) (*ListFeedsResponse, error)) *MockFeedServiceClient_ListFeeds_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserFeeds provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) ListUserFeeds(ctx context.Context, in *ListUserFeedsRequest, opts ...grpc.CallOption) (*ListUserFeedsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserFeeds")
	}

	var r0 *ListUserFeedsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ListUserFeedsRequest, ...grpc.CallOption) (*ListUserFeedsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ListUserFeedsRequest, ...grpc.CallOption) *ListUserFeedsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ListUserFeedsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ListUserFeedsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_ListUserFeeds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserFeeds'
type MockFeedServiceClient_ListUserFeeds_Call struct {
	*mock.Call
}

// ListUserFeeds is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ListUserFeedsRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) ListUserFeeds(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_ListUserFeeds_Call {
	return &MockFeedServiceClient_ListUserFeeds_Call{Call: _e.mock.On("ListUserFeeds",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_ListUserFeeds_Call) Run(run func(ctx context.Context, in *ListUserFeedsRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_ListUserFeeds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ListUserFeedsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_ListUserFeeds_Call) Return(_a0 *ListUserFeedsResponse, _a1 error) *MockFeedServiceClient_ListUserFeeds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_ListUserFeeds_Call) RunAndReturn(run func(context.Context, *ListUserFeedsRequest, ...grpc.CallOption) (*ListUserFeedsResponse, error)) *MockFeedServiceClient_ListUserFeeds_Call {
	_c.Call.Return(run)
	return _c
}

// MarkArticleAsRead provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) MarkArticleAsRead(ctx context.Context, in *MarkArticleAsReadRequest, opts ...grpc.CallOption) (*MarkArticleAsReadResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MarkArticleAsRead")
	}

	var r0 *MarkArticleAsReadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *MarkArticleAsReadRequest, ...grpc.CallOption) (*MarkArticleAsReadResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *MarkArticleAsReadRequest, ...grpc.CallOption) *MarkArticleAsReadResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MarkArticleAsReadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *MarkArticleAsReadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_MarkArticleAsRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkArticleAsRead'
type MockFeedServiceClient_MarkArticleAsRead_Call struct {
	*mock.Call
}

// MarkArticleAsRead is a helper method to define mock.On call
//   - ctx context.Context
//   - in *MarkArticleAsReadRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) MarkArticleAsRead(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_MarkArticleAsRead_Call {
	return &MockFeedServiceClient_MarkArticleAsRead_Call{Call: _e.mock.On("MarkArticleAsRead",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_MarkArticleAsRead_Call) Run(run func(ctx context.Context, in *MarkArticleAsReadRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_MarkArticleAsRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*MarkArticleAsReadRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_MarkArticleAsRead_Call) Return(_a0 *MarkArticleAsReadResponse, _a1 error) *MockFeedServiceClient_MarkArticleAsRead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_MarkArticleAsRead_Call) RunAndReturn(run func(context.Context, *MarkArticleAsReadRequest, ...grpc.CallOption) (*MarkArticleAsReadResponse, error)) *MockFeedServiceClient_MarkArticleAsRead_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) Ready(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 *ReadyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ReadyRequest, ...grpc.CallOption) (*ReadyResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ReadyRequest, ...grpc.CallOption) *ReadyResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ReadyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ReadyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type MockFeedServiceClient_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
//   - ctx context.Context
//   - in *ReadyRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) Ready(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_Ready_Call {
	return &MockFeedServiceClient_Ready_Call{Call: _e.mock.On("Ready",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_Ready_Call) Run(run func(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*ReadyRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_Ready_Call) Return(_a0 *ReadyResponse, _a1 error) *MockFeedServiceClient_Ready_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_Ready_Call) RunAndReturn(run func(context.Context, *ReadyRequest, ...grpc.CallOption) (*ReadyResponse, error)) *MockFeedServiceClient_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// SaveArticle provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) SaveArticle(ctx context.Context, in *SaveArticleRequest, opts ...grpc.CallOption) (*SaveArticleResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SaveArticle")
	}

	var r0 *SaveArticleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *SaveArticleRequest, ...grpc.CallOption) (*SaveArticleResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *SaveArticleRequest, ...grpc.CallOption) *SaveArticleResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SaveArticleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *SaveArticleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_SaveArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveArticle'
type MockFeedServiceClient_SaveArticle_Call struct {
	*mock.Call
}

// SaveArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - in *SaveArticleRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) SaveArticle(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_SaveArticle_Call {
	return &MockFeedServiceClient_SaveArticle_Call{Call: _e.mock.On("SaveArticle",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_SaveArticle_Call) Run(run func(ctx context.Context, in *SaveArticleRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_SaveArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*SaveArticleRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_SaveArticle_Call) Return(_a0 *SaveArticleResponse, _a1 error) *MockFeedServiceClient_SaveArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_SaveArticle_Call) RunAndReturn(run func(context.Context, *SaveArticleRequest, ...grpc.CallOption) (*SaveArticleResponse, error)) *MockFeedServiceClient_SaveArticle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFeed provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) UpdateFeed(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption) (*UpdateFeedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeed")
	}

	var r0 *UpdateFeedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateFeedRequest, ...grpc.CallOption) (*UpdateFeedResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateFeedRequest, ...grpc.CallOption) *UpdateFeedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateFeedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateFeedRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_UpdateFeed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFeed'
type MockFeedServiceClient_UpdateFeed_Call struct {
	*mock.Call
}

// UpdateFeed is a helper method to define mock.On call
//   - ctx context.Context
//   - in *UpdateFeedRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) UpdateFeed(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_UpdateFeed_Call {
	return &MockFeedServiceClient_UpdateFeed_Call{Call: _e.mock.On("UpdateFeed",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_UpdateFeed_Call) Run(run func(ctx context.Context, in *UpdateFeedRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_UpdateFeed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*UpdateFeedRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_UpdateFeed_Call) Return(_a0 *UpdateFeedResponse, _a1 error) *MockFeedServiceClient_UpdateFeed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_UpdateFeed_Call) RunAndReturn(run func(context.Context, *UpdateFeedRequest, ...grpc.CallOption) (*UpdateFeedResponse, error)) *MockFeedServiceClient_UpdateFeed_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStats provides a mock function with given fields: ctx, in, opts
func (_m *MockFeedServiceClient) UpdateStats(ctx context.Context, in *UpdateStatsRequest, opts ...grpc.CallOption) (*UpdateStatsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStats")
	}

	var r0 *UpdateStatsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateStatsRequest, ...grpc.CallOption) (*UpdateStatsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *UpdateStatsRequest, ...grpc.CallOption) *UpdateStatsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UpdateStatsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *UpdateStatsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeedServiceClient_UpdateStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStats'
type MockFeedServiceClient_UpdateStats_Call struct {
	*mock.Call
}

// UpdateStats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *UpdateStatsRequest
//   - opts ...grpc.CallOption
func (_e *MockFeedServiceClient_Expecter) UpdateStats(ctx interface{}, in interface{}, opts ...interface{}) *MockFeedServiceClient_UpdateStats_Call {
	return &MockFeedServiceClient_UpdateStats_Call{Call: _e.mock.On("UpdateStats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockFeedServiceClient_UpdateStats_Call) Run(run func(ctx context.Context, in *UpdateStatsRequest, opts ...grpc.CallOption)) *MockFeedServiceClient_UpdateStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*UpdateStatsRequest), variadicArgs...)
	})
	return _c
}

func (_c *MockFeedServiceClient_UpdateStats_Call) Return(_a0 *UpdateStatsResponse, _a1 error) *MockFeedServiceClient_UpdateStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeedServiceClient_UpdateStats_Call) RunAndReturn(run func(context.Context, *UpdateStatsRequest, ...grpc.CallOption) (*UpdateStatsResponse, error)) *MockFeedServiceClient_UpdateStats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFeedServiceClient creates a new instance of MockFeedServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeedServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeedServiceClient {
	mock := &MockFeedServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
