syntax = "proto3";

package feeds.v1;

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ericbutera/amalgam/services/rpc/gen/go/feeds"; // Adjust this path

service FeedService {
  rpc GetFeed(GetFeedRequest) returns (GetFeedResponse);
  rpc ListFeeds(ListFeedsRequest) returns (ListFeedsResponse);
  rpc CreateFeed(CreateFeedRequest) returns (CreateFeedResponse);
  rpc UpdateFeed(UpdateFeedRequest) returns (UpdateFeedResponse);
  rpc ListArticles(ListArticlesRequest) returns (ListArticlesResponse);
  rpc GetArticle(GetArticleRequest) returns (GetArticleResponse);
  rpc SaveArticle(SaveArticleRequest) returns (SaveArticleResponse);
  rpc Ready(ReadyRequest) returns (ReadyResponse);

  // Deprecated: use graph service
  rpc FeedTask(FeedTaskRequest) returns (FeedTaskResponse) {
    option deprecated = true;
  }
}

message Feed {
  string id = 1;
  string url = 2;
  string name = 3;
}

message Article {
  string id = 1;
  string title = 2;
  string content = 3;
  string feed_id = 4;
  string url = 5;
  string image_url = 6;
  string preview = 7;
  string guid = 8;
  string author_name = 9;
  string author_email = 10;
  string description = 11;
  google.protobuf.Timestamp updated_at = 12;
}

message Empty {}

message User {
  string id = 1 [
    (buf.validate.field).string.uuid = true,
    (buf.validate.field).required = true
  ];
}

message GetFeedRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
}

message GetFeedResponse {
  Feed feed = 1;
}

message ListFeedsRequest {
  User user = 1; // There are parts that don't require a user like refresh feeds
}

message ListFeedsResponse {
  repeated Feed feeds = 1;
}

message CreateFeedRequest {
  message Feed {
    string url = 1 [(buf.validate.field).string.uri = true];
    string name = 2;
  }
  Feed feed = 1;
  User user = 2 [(buf.validate.field).required = true];
}

message CreateFeedResponse {
  string id = 1;
}

message UpdateFeedRequest {
  message Feed {
    string id = 1 [(buf.validate.field).string.uuid = true];
    string url = 2;
    string name = 3;
  }
  Feed feed = 1;
}

message UpdateFeedResponse {}

// List options contains pagination, filtering, sorting, etc.
message ListOptions {
  string cursor = 1; // Pagination cursor
  int32 limit = 2; // Number of records to return
}

message Pagination {
  string next = 1; // Cursor for the next page
  string previous = 2; // Cursor for the previous page
}

message ListArticlesRequest {
  string feed_id = 1 [(buf.validate.field).string.uuid = true];
  ListOptions options = 2;
}

message ListArticlesResponse {
  repeated Article articles = 1;
  Pagination pagination = 2;
}

message GetArticleRequest {
  string id = 1 [(buf.validate.field).string.uuid = true];
}

message GetArticleResponse {
  Article article = 1;
}

message SaveArticleRequest {
  Article article = 1;
}

message SaveArticleResponse {
  string id = 1;
}

message ValidationErrors {
  repeated ValidationError errors = 1;
}
message ValidationError {
  string field = 1;
  string tag = 2;
  string raw_message = 3;
  string message = 4;
}

message FeedTaskRequest {
  enum Task {
    TASK_UNSPECIFIED = 0;
    TASK_GENERATE_FEEDS = 1;
  }
  Task task = 1 [(buf.validate.field).enum.defined_only = true];
  option deprecated = true;
}

message FeedTaskResponse {
  string id = 1;
  string message = 2;
  option deprecated = true;
}

message ReadyRequest {}
message ReadyResponse {}
