package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/ericbutera/amalgam/graph/graph/model"
	rest "github.com/ericbutera/amalgam/pkg/client"
	pb "github.com/ericbutera/amalgam/pkg/feeds/v1"
	"github.com/samber/lo"
)

// AddFeed is the resolver for the addFeed field.
func (r *mutationResolver) AddFeed(ctx context.Context, url string, name string) (*model.AddFeedResponse, error) {
	req := rest.ServerCreateFeedRequest{
		Feed: &rest.ServerCreateFeed{
			Url:  url,
			Name: lo.ToPtr(name),
		},
	}
	resp, _, err := r.apiClient.DefaultAPI.FeedsPost(ctx).Request(req).Execute()
	if err != nil {
		return nil, err
	}
	return &model.AddFeedResponse{
		ID: lo.FromPtr(resp.Id),
	}, nil
}

// UpdateFeed is the resolver for the updateFeed field.
func (r *mutationResolver) UpdateFeed(ctx context.Context, id string, url *string, name *string) (*model.UpdateFeedResponse, error) {
	req := rest.ServerUpdateFeedRequest{
		Feed: &rest.ServerUpdateFeed{
			Name: name,
			Url:  lo.FromPtr(url),
		},
	}
	_, _, err := r.apiClient.DefaultAPI.FeedsIdPut(ctx, id).Request(req).Execute()
	if err != nil {
		return nil, err
	}
	// TODO: revisit returning id (rpc returns empty)
	return &model.UpdateFeedResponse{
		ID: id,
	}, nil
}

// Feeds is the resolver for the feeds field.
func (r *queryResolver) Feeds(ctx context.Context) ([]*model.Feed, error) {
	var feeds []*model.Feed
	res, err := r.rpcClient.ListFeeds(ctx, &pb.ListFeedsRequest{})
	if err != nil {
		return nil, err
	}
	for _, feed := range res.Feeds {
		// TODO mapper
		feeds = append(feeds, &model.Feed{
			ID:   feed.Id,
			URL:  feed.Url,
			Name: feed.Name,
		})
	}
	return feeds, nil
}

// Feed is the resolver for the feed field.
func (r *queryResolver) Feed(ctx context.Context, id string) (*model.Feed, error) {
	resp, _, err := r.apiClient.DefaultAPI.FeedsIdGet(ctx, id).Execute()
	if err != nil {
		return nil, err
	}
	// convert resp.Feed into model.Feed
	// note: both have json tags which might be usable for conversion (instead of mapstructure)
	feed := model.Feed{
		ID:   id,
		URL:  resp.Feed.Url,
		Name: lo.FromPtr(resp.Feed.Name),
	}
	return &feed, nil
}

// Articles is the resolver for the articles field.
func (r *queryResolver) Articles(ctx context.Context, feedID string) ([]*model.Article, error) {
	resp, _, err := r.apiClient.DefaultAPI.FeedsIdArticlesGet(ctx, feedID).Execute()
	if err != nil {
		return nil, err
	}
	var articles []*model.Article
	for _, article := range resp.Articles {
		articles = append(articles, &model.Article{
			ID:      string(article.Id),
			Title:   lo.FromPtr(article.Title),
			Content: lo.FromPtr(article.Content),
		})
	}
	return articles, nil
}

// Article is the resolver for the article field.
func (r *queryResolver) Article(ctx context.Context, id string) (*model.Article, error) {
	resp, _, err := r.apiClient.DefaultAPI.ArticlesIdGet(ctx, id).Execute()
	if err != nil {
		return nil, err
	}
	// TODO: auto map fields
	article := model.Article{
		ID:      id,
		Title:   lo.FromPtr(resp.Article.Title),
		Content: lo.FromPtr(resp.Article.Content),
	}
	return &article, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
