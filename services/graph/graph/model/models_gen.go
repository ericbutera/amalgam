// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AddResponse struct {
	ID string `json:"id"`
}

type Article struct {
	ID          string    `json:"id"`
	FeedID      string    `json:"feedId"`
	URL         string    `json:"url"`
	Title       string    `json:"title"`
	ImageURL    *string   `json:"imageUrl,omitempty"`
	Content     string    `json:"content"`
	Description string    `json:"description"`
	Preview     string    `json:"preview"`
	GUID        *string   `json:"guid,omitempty"`
	AuthorName  *string   `json:"authorName,omitempty"`
	AuthorEmail *string   `json:"authorEmail,omitempty"`
	UpdatedAt   time.Time `json:"updatedAt"`
}

type ArticlesResponse struct {
	Articles   []*Article  `json:"articles"`
	Pagination *Pagination `json:"pagination"`
}

type Feed struct {
	ID            string    `json:"id"`
	URL           string    `json:"url"`
	Name          string    `json:"name"`
	CreatedAt     time.Time `json:"createdAt"`
	ViewedAt      time.Time `json:"viewedAt"`
	UnreadStartAt time.Time `json:"unreadStartAt"`
	UnreadCount   int       `json:"unreadCount"`
}

type FeedResponse struct {
	Feeds []*Feed `json:"feeds"`
}

type FeedTaskResponse struct {
	TaskID string `json:"taskId"`
}

type FetchFeedsResponse struct {
	ID string `json:"id"`
}

type GenerateFeedsResponse struct {
	ID string `json:"id"`
}

type ListOptions struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
}

type Mutation struct {
}

type Pagination struct {
	Next     string `json:"next"`
	Previous string `json:"previous"`
}

type Query struct {
}

type UpdateResponse struct {
	ID string `json:"id"`
}

type TaskType string

const (
	TaskTypeGenerateFeeds TaskType = "GENERATE_FEEDS"
	TaskTypeRefreshFeeds  TaskType = "REFRESH_FEEDS"
)

var AllTaskType = []TaskType{
	TaskTypeGenerateFeeds,
	TaskTypeRefreshFeeds,
}

func (e TaskType) IsValid() bool {
	switch e {
	case TaskTypeGenerateFeeds, TaskTypeRefreshFeeds:
		return true
	}
	return false
}

func (e TaskType) String() string {
	return string(e)
}

func (e *TaskType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskType", str)
	}
	return nil
}

func (e TaskType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
