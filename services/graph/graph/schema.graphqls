scalar DateTime

type Feed {
  id: ID!
  url: String!
  name: String!
  createdAt: DateTime!
  viewedAt: DateTime!
  unreadStartAt: DateTime!
  unreadCount: Int!
  # note: this is not a 1:1 mapping to database. it will contain "unread" and other metadata fields specific to the logged in user
}

type Article {
  id: ID!
  feedId: ID!
  url: String!
  title: String!
  imageUrl: String
  content: String!
  description: String!
  preview: String!
  guid: String
  authorName: String
  authorEmail: String
  updatedAt: DateTime!
  userArticle: UserArticle
}

type UserArticle {
  viewedAt: DateTime!
}

type FeedResponse {
  feeds: [Feed!]!
}

type AddResponse {
  id: ID!
}

type UpdateResponse {
  id: ID!
}

type GenerateFeedsResponse {
  id: String!
}

type FetchFeedsResponse {
  id: String!
}

type Pagination {
  next: String!
  previous: String!
}

type ArticlesResponse {
  articles: [Article!]!
  pagination: Pagination!
}

input ListOptions {
  cursor: String
  limit: Int
}

enum TaskType {
  GENERATE_FEEDS
  REFRESH_FEEDS
}

type FeedTaskResponse {
  taskId: ID!
}

type Query {
  feeds: FeedResponse! # fetch a users feeds
  feed(id: ID!): Feed
  articles(feedId: ID!, options: ListOptions): ArticlesResponse!
  article(id: ID!): Article
}

type Mutation {
  # TODO: directive OR context
  # admin and backend should be able to assign a userId to a feed
  # - execution: userRole := ctx.Value("role").(string)
  # - on data: userId: ID @role(requiredRole: "admin")
  addFeed(url: String!, name: String!): AddResponse!
  updateFeed(id: ID!, url: String, name: String): UpdateResponse!
  feedTask(task: TaskType!): FeedTaskResponse!
  markArticleRead(id: ID!): UpdateResponse!
}
