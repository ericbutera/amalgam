"""The @defer directive may be specified on a fragment spread to imply de-prioritization, that causes the fragment to be omitted in the initial response, and delivered as a subsequent response afterward. A query with @defer directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred delivered in a subsequent response. @include and @skip take precedence over @defer."""
directive @defer(
	if: Boolean
	label: String
) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"""The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type."""
directive @deprecated(
	reason: String
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | ENUM_VALUE

"""The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument."""
directive @include(
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument."""
directive @skip(
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types."""
directive @specifiedBy(
	url: String!
) on SCALAR

type AddResponse {
	id: ID!
}

type Article {
	id: ID!
	feedId: ID!
	url: String!
	title: String!
	imageUrl: String
	content: String!
	description: String!
	preview: String!
	guid: String
	authorName: String
	authorEmail: String
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

type Feed {
	id: ID!
	url: String!
	name: String!
}

type FetchFeedsResponse {
	id: String!
}

"""The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point)."""
scalar Float

type GenerateFeedsResponse {
	id: String!
}

"""The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as "4") or integer (such as 4) input value will be accepted as an ID."""
scalar ID

"""The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."""
scalar Int

type Mutation {
	addFeed(
		url: String!
		name: String!
	): AddResponse!
	updateFeed(
		id: ID!
		url: String
		name: String
	): UpdateResponse!
	generateFeeds: GenerateFeedsResponse!
	fetchFeeds: FetchFeedsResponse!
}

type Query {
	feeds: [Feed!]!
	feed(
		id: ID!
	): Feed
	articles(
		feedId: ID!
	): [Article!]!
	article(
		id: ID!
	): Article
}

"""The `String`scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text."""
scalar String

type UpdateResponse {
	id: ID!
}

