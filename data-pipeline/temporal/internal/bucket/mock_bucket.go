// Code generated by mockery v2.46.3. DO NOT EDIT.

package bucket

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockBucket is an autogenerated mock type for the Bucket type
type MockBucket struct {
	mock.Mock
}

type MockBucket_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBucket) EXPECT() *MockBucket_Expecter {
	return &MockBucket_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, bucketName
func (_m *MockBucket) Create(ctx context.Context, bucketName string) error {
	ret := _m.Called(ctx, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBucket_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBucket_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
func (_e *MockBucket_Expecter) Create(ctx interface{}, bucketName interface{}) *MockBucket_Create_Call {
	return &MockBucket_Create_Call{Call: _e.mock.On("Create", ctx, bucketName)}
}

func (_c *MockBucket_Create_Call) Run(run func(ctx context.Context, bucketName string)) *MockBucket_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBucket_Create_Call) Return(_a0 error) *MockBucket_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_Create_Call) RunAndReturn(run func(context.Context, string) error) *MockBucket_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, bucketName, fileName
func (_m *MockBucket) Exists(ctx context.Context, bucketName string, fileName string) (bool, error) {
	ret := _m.Called(ctx, bucketName, fileName)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, bucketName, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, bucketName, fileName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBucket_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockBucket_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - fileName string
func (_e *MockBucket_Expecter) Exists(ctx interface{}, bucketName interface{}, fileName interface{}) *MockBucket_Exists_Call {
	return &MockBucket_Exists_Call{Call: _e.mock.On("Exists", ctx, bucketName, fileName)}
}

func (_c *MockBucket_Exists_Call) Run(run func(ctx context.Context, bucketName string, fileName string)) *MockBucket_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBucket_Exists_Call) Return(_a0 bool, _a1 error) *MockBucket_Exists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBucket_Exists_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockBucket_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, bucketName, fileName
func (_m *MockBucket) Read(ctx context.Context, bucketName string, fileName string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, bucketName, fileName)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, error)); ok {
		return rf(ctx, bucketName, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, bucketName, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBucket_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockBucket_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - fileName string
func (_e *MockBucket_Expecter) Read(ctx interface{}, bucketName interface{}, fileName interface{}) *MockBucket_Read_Call {
	return &MockBucket_Read_Call{Call: _e.mock.On("Read", ctx, bucketName, fileName)}
}

func (_c *MockBucket_Read_Call) Run(run func(ctx context.Context, bucketName string, fileName string)) *MockBucket_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBucket_Read_Call) Return(_a0 io.ReadCloser, _a1 error) *MockBucket_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBucket_Read_Call) RunAndReturn(run func(context.Context, string, string) (io.ReadCloser, error)) *MockBucket_Read_Call {
	_c.Call.Return(run)
	return _c
}

// SetBucketExpiry provides a mock function with given fields: ctx, bucketName
func (_m *MockBucket) SetBucketExpiry(ctx context.Context, bucketName string) error {
	ret := _m.Called(ctx, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for SetBucketExpiry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bucketName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBucket_SetBucketExpiry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBucketExpiry'
type MockBucket_SetBucketExpiry_Call struct {
	*mock.Call
}

// SetBucketExpiry is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
func (_e *MockBucket_Expecter) SetBucketExpiry(ctx interface{}, bucketName interface{}) *MockBucket_SetBucketExpiry_Call {
	return &MockBucket_SetBucketExpiry_Call{Call: _e.mock.On("SetBucketExpiry", ctx, bucketName)}
}

func (_c *MockBucket_SetBucketExpiry_Call) Run(run func(ctx context.Context, bucketName string)) *MockBucket_SetBucketExpiry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBucket_SetBucketExpiry_Call) Return(_a0 error) *MockBucket_SetBucketExpiry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBucket_SetBucketExpiry_Call) RunAndReturn(run func(context.Context, string) error) *MockBucket_SetBucketExpiry_Call {
	_c.Call.Return(run)
	return _c
}

// WriteStream provides a mock function with given fields: ctx, bucketName, fileName, reader, contentType, size
func (_m *MockBucket) WriteStream(ctx context.Context, bucketName string, fileName string, reader io.Reader, contentType string, size int64) (*UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, fileName, reader, contentType, size)

	if len(ret) == 0 {
		panic("no return value specified for WriteStream")
	}

	var r0 *UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, string, int64) (*UploadInfo, error)); ok {
		return rf(ctx, bucketName, fileName, reader, contentType, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, string, int64) *UploadInfo); ok {
		r0 = rf(ctx, bucketName, fileName, reader, contentType, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UploadInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, string, int64) error); ok {
		r1 = rf(ctx, bucketName, fileName, reader, contentType, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBucket_WriteStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteStream'
type MockBucket_WriteStream_Call struct {
	*mock.Call
}

// WriteStream is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - fileName string
//   - reader io.Reader
//   - contentType string
//   - size int64
func (_e *MockBucket_Expecter) WriteStream(ctx interface{}, bucketName interface{}, fileName interface{}, reader interface{}, contentType interface{}, size interface{}) *MockBucket_WriteStream_Call {
	return &MockBucket_WriteStream_Call{Call: _e.mock.On("WriteStream", ctx, bucketName, fileName, reader, contentType, size)}
}

func (_c *MockBucket_WriteStream_Call) Run(run func(ctx context.Context, bucketName string, fileName string, reader io.Reader, contentType string, size int64)) *MockBucket_WriteStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(string), args[5].(int64))
	})
	return _c
}

func (_c *MockBucket_WriteStream_Call) Return(_a0 *UploadInfo, _a1 error) *MockBucket_WriteStream_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBucket_WriteStream_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, string, int64) (*UploadInfo, error)) *MockBucket_WriteStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBucket creates a new instance of MockBucket. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBucket(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBucket {
	mock := &MockBucket{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
