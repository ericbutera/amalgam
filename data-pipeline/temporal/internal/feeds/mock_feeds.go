// Code generated by mockery v2.47.0. DO NOT EDIT.

package feeds

import (
	context "context"

	parse "github.com/ericbutera/amalgam/pkg/feed/parse"
	mock "github.com/stretchr/testify/mock"
)

// MockFeeds is an autogenerated mock type for the Feeds type
type MockFeeds struct {
	mock.Mock
}

type MockFeeds_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFeeds) EXPECT() *MockFeeds_Expecter {
	return &MockFeeds_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockFeeds) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFeeds_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockFeeds_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockFeeds_Expecter) Close() *MockFeeds_Close_Call {
	return &MockFeeds_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockFeeds_Close_Call) Run(run func()) *MockFeeds_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFeeds_Close_Call) Return(_a0 error) *MockFeeds_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeeds_Close_Call) RunAndReturn(run func() error) *MockFeeds_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetFeeds provides a mock function with given fields:
func (_m *MockFeeds) GetFeeds() ([]Feed, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFeeds")
	}

	var r0 []Feed
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]Feed, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []Feed); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Feed)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeeds_GetFeeds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFeeds'
type MockFeeds_GetFeeds_Call struct {
	*mock.Call
}

// GetFeeds is a helper method to define mock.On call
func (_e *MockFeeds_Expecter) GetFeeds() *MockFeeds_GetFeeds_Call {
	return &MockFeeds_GetFeeds_Call{Call: _e.mock.On("GetFeeds")}
}

func (_c *MockFeeds_GetFeeds_Call) Run(run func()) *MockFeeds_GetFeeds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFeeds_GetFeeds_Call) Return(_a0 []Feed, _a1 error) *MockFeeds_GetFeeds_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeeds_GetFeeds_Call) RunAndReturn(run func() ([]Feed, error)) *MockFeeds_GetFeeds_Call {
	_c.Call.Return(run)
	return _c
}

// SaveArticle provides a mock function with given fields: ctx, article
func (_m *MockFeeds) SaveArticle(ctx context.Context, article parse.Article) (string, error) {
	ret := _m.Called(ctx, article)

	if len(ret) == 0 {
		panic("no return value specified for SaveArticle")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, parse.Article) (string, error)); ok {
		return rf(ctx, article)
	}
	if rf, ok := ret.Get(0).(func(context.Context, parse.Article) string); ok {
		r0 = rf(ctx, article)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, parse.Article) error); ok {
		r1 = rf(ctx, article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFeeds_SaveArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveArticle'
type MockFeeds_SaveArticle_Call struct {
	*mock.Call
}

// SaveArticle is a helper method to define mock.On call
//   - ctx context.Context
//   - article parse.Article
func (_e *MockFeeds_Expecter) SaveArticle(ctx interface{}, article interface{}) *MockFeeds_SaveArticle_Call {
	return &MockFeeds_SaveArticle_Call{Call: _e.mock.On("SaveArticle", ctx, article)}
}

func (_c *MockFeeds_SaveArticle_Call) Run(run func(ctx context.Context, article parse.Article)) *MockFeeds_SaveArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(parse.Article))
	})
	return _c
}

func (_c *MockFeeds_SaveArticle_Call) Return(_a0 string, _a1 error) *MockFeeds_SaveArticle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFeeds_SaveArticle_Call) RunAndReturn(run func(context.Context, parse.Article) (string, error)) *MockFeeds_SaveArticle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStats provides a mock function with given fields: ctx, feedID
func (_m *MockFeeds) UpdateStats(ctx context.Context, feedID string) error {
	ret := _m.Called(ctx, feedID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStats")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, feedID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFeeds_UpdateStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStats'
type MockFeeds_UpdateStats_Call struct {
	*mock.Call
}

// UpdateStats is a helper method to define mock.On call
//   - ctx context.Context
//   - feedID string
func (_e *MockFeeds_Expecter) UpdateStats(ctx interface{}, feedID interface{}) *MockFeeds_UpdateStats_Call {
	return &MockFeeds_UpdateStats_Call{Call: _e.mock.On("UpdateStats", ctx, feedID)}
}

func (_c *MockFeeds_UpdateStats_Call) Run(run func(ctx context.Context, feedID string)) *MockFeeds_UpdateStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFeeds_UpdateStats_Call) Return(_a0 error) *MockFeeds_UpdateStats_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFeeds_UpdateStats_Call) RunAndReturn(run func(context.Context, string) error) *MockFeeds_UpdateStats_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFeeds creates a new instance of MockFeeds. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFeeds(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFeeds {
	mock := &MockFeeds{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
